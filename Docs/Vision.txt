Detective City: Вижн-документ
============================

1. Краткое описание:
- Вдохновляясь игрой Shadow of Doubt, которая показала потенциал процедурных
  детективных симуляторов, но не раскрыла глубину геймплея, мы видим огромные
  возможности для развития жанра.
- Наша цель — создать платформу для прототипирования идей в жанре «детектив в
  городе»: симулятор, где можно быстро тестировать и комбинировать игровые
  механики, связанные с расследованиями, поведением NPC и динамикой городских
  событий.
- Мы сейчас делаем не игру, а инструмент для поиска новых форм интерактивных
  историй и экспериментов с симуляцией.

2. Цели и ценности проекта
**Главная цель:**
Создать платформу, способную генерировать исследовательский контент, который
останется интересным для игрока или исследователя бесконечно долго — за счёт
глубины и разнообразия возникающих ситуаций, а не только за счёт масштабов мира.

**Ключевые ценности:**
- **Гибкая симуляция:** Системы должны порождать неожиданные сценарии и
  реагировать на действия игрока и NPC, а не работать по жёстким скриптам.
- **Постоянный интерес:** Игроку всегда есть что исследовать и анализировать —
  ситуации не повторяются, а механики стимулируют поиск новых решений.
- **Экспериментальность:** Платформа предназначена для быстрого тестирования
  новых идей, механик и гипотез. Любая система может быть заменена или
  расширена без ущерба для целостности симуляции.
- **Модульность и открытость:** Архитектура строится с прицелом на модульность,
  поддержку модификаций и открытый исходный код.
- **Фокус на информации и социальных взаимодействиях:** Особое внимание уделяется
  механикам, связанным с тайнами, секретами, манипуляцией знаниями и социальными
  интригами между NPC.
- **Прозрачность и минимализм:** Минимум графики, максимум прозрачности процессов
  для удобства анализа и отладки.

**Долгосрочное видение:**
Понять, какие механики и сочетания систем действительно работают для создания
бесконечно интересных детективных сценариев. Если по итогам экспериментов
появятся новые, достойные внимания механики, платформа может перерасти в
коммерческую игру с поддержкой модов и развитым сообществом.

3. Ключевые механики и особенности
------------------------------

- **Симуляция знаний и секретов:**
  Каждый NPC обладает уникальным набором знаний, секретов и информации о мире,
  других персонажах и событиях. Система позволяет моделировать, кто что знает,
  как информация распространяется, и как этим можно манипулировать.

- **Тайные общества и социальные интриги:**
  В мире существуют скрытые группы и альянсы, которые влияют на поведение NPC,
  порождают уникальные сценарии (шантаж, заговоры, манипуляции).

- **Детективные расследования:**
  Игрок (или AI-детектив) может собирать улики, анализировать связи между
  событиями и персонажами, выдвигать гипотезы и обвинения.

- **Реакция NPC на наблюдение:**
  Персонажи реагируют на присутствие игрока и других NPC: преступник не станет
  совершать преступление на глазах, может пытаться обмануть или отвлечь
  наблюдателя.

- **Манипуляция информацией:**
  NPC и игрок могут использовать слухи, ложные следы, шантаж и другие способы
  влияния на знания и поведение окружающих.

- **Гибкая архитектура симуляции:**
  Все системы построены модульно, что позволяет быстро добавлять, заменять или
  отключать отдельные механики для экспериментов.

- **Минималистичная визуализация:**
  Визуальная часть служит для отладки и анализа:
  акцент на прозрачности процессов и удобстве наблюдения за симуляцией.

- **Поддержка модификаций:**
  Платформа изначально проектируется с возможностью расширения и поддержки
  пользовательских модов.

4. Техническая архитектура

4.1. Базовые технологии:
- Unity 6 LTS 
- C# как основной язык разработки

4.2. Графическая реализация:
- Текущий прототип использует абстрактное представление мира в виде графов
- Архитектура позволяет легко заменить визуализацию на:
  * 2D/3D представление
  * Систему комнат (визуальная новелла)
  * Чисто текстовый интерфейс
- Графическая подсистема будет разработана после появления специалиста

4.3. Ключевые архитектурные паттерны:
- Единая точка доступа
- Внедрение зависимостей (DI)
- Компонентный подход на MonoBehaviour на моменте портотипирования.

4.4. Модульность и расширяемость:
- Все системы реализованы как независимые модули
- Четкие интерфейсы между системами
- Поддержка горячей замены механик
- Встроенная система модификаций

4.5. Особенности реализации:
- Акцент на тестируемость и отладку
- Подробное логирование всех ключевых событий
- Инструменты визуализации состояния симуляции
- Минимальные зависимости между системами