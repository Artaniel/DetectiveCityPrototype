Стиль кода DetectiveCityPrototype
==============================

1. Не используем [SerializeField] private для полей — просто используем public.
2. Ссылки на предыдущие этажи дерева зависимостей (например, _boot) идут первыми в классе и помечаются подчёркиванием.
3. Имена переменных с маленькой буквы. Имена функций и классов с большой. Даже если переменная public, все равно с маленькой.
4. Не делаем классов без MonoBehaviour. Даже если просто дата контейнер. 
5. Открывающаяся фигурная скобка { всегда ставится в той же строке, что и объявление функции, метода, свойства, enum, цикла или условия.
 Пример:
 ```csharp
 void MyFunction() {
 // ...
 }
 if (x > 0) {
 // ...
 }
 ```
 Исключение: для объявления класса или struct допускается ставить скобку на новой строке.

6. Инициализация зависимостей через Init:
   Для всех компонентов, которые требуют ссылки на другие объекты (например, NpcMetabolism, AI, Inventory и т.д.), используем публичную функцию Init(...), в которую передаются все необходимые зависимости (например, ссылки на npc, npcState, npcData и т.д.).
   Внутри Init(...) эти ссылки сохраняются в приватные поля класса (например, _npc, _npcState, _npcData), чтобы к ним можно было обращаться из любого метода этого компонента.
   Пример:
   ```csharp
   public class NpcMetabolism : MonoBehaviour
   {
       private Boot _boot;
       private NpcState _npcState;

       public void Init(Boot boot, NpcState npcState) {
           _boot = boot;
           _npcState = npcState;
       }

       public void TickUpdate(int deltaMinutes) {
           _npcState.hunger += ...;
       }
   }
   ```
   - Все обращения к зависимостям внутри класса — только через приватные поля, установленные в Init.
   - Прямой доступ к публичным полям других компонентов вне Init не допускается.

7. Не используем var, расписываем имя типа полностью.

8. Инициализация зависимостей через Boot:
   - Все компоненты, которые требуют инициализации, всегда принимают ссылку на Boot в своей Init-функции, даже если прямо сейчас Boot не используется.
   - Сигнатура Init всегда следующая:
     public void Init(Boot boot, ...)
   - Это позволяет в любой точке кода получить доступ к глобальным сервисам и объектам через boot (например, boot.world, boot.locationFactory и т.д.).
   - Не допускается создавать отдельные Init без Boot или хранить Boot только в некоторых компонентах — Boot должен быть доступен везде через DI.
   - Пример:
     public void Init(Boot boot, NPC npc) {
         _boot = boot;
         _npc = npc;
         // ...
     } 
     
(дополнять по мере необходимости) 