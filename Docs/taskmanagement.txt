Этап 0: Базовый прототип мира

Задачи:
[+] Мир как граф локаций: класс Location (ID, Type, ConnectedLocationsIDs[])
[+] Создать 5 локаций: HomeNPC1, WorkShop, CommercialMall, Bar, Street (связи: Улица соединяет все здания)
[+] Базовый NPC: класс NPCData (Name, HomeLocationID, WorkLocationID)
[+] Класс NPCState (CurrentLocationID, Hunger, Energy, CurrentActivity)
[+] 2 тестовых NPC: Обычный Джо (Home=HomeNPC1, Work=WorkShop), Жулик Боб (Home=HomeNPC1, Work=None)
[+] Система времени: класс WorldState (CurrentTimeInMinutes, Locations[], NPCs[])
[+] Упрощенный "движок времени": цикл, увеличивающий CurrentTimeInMinutes на 1 каждую секунду реального времени
[+] Изменение состояний NPC со временем: голод растет (0.001 в минуту), энергия тратится (0.001 в минуту)

Критерий успеха: NPC "живут" в мире, их состояние меняется со временем (голод растет), можно смотреть, где они находятся.

Этап 1: Utility AI и перемещения

Задачи:
[+] Реализовать действия (NPCAction):
  [+] Idle: Ничего не делать (Utility = 0.1, если нет других дел)
  [+] MoveTo(targetID): Рассчитывает путь (пока по графу напрямую), меняет CurrentLocation через N "тиков"
  [+] Eat: Требует быть в локации с едой (пока хардкод в Home). Снижает голод
[+] Utility AI (минимальная версия):
  [+] Для Eat: Utility = NPCState.Hunger / 100f (чем голоднее, тем важнее)
  [+] Для Idle: Константа 0.1
[+] Механика выбора действий:
  [+] В каждом тике для каждого NPC: собрать все возможные действия (CanPerform)
  [+] Выбрать действие с MAX Utility
  [+] Выполнить его (Eat или MoveTo + потом Eat)
[+] Отладка: логировать выбранное действие: [Время] Боб: Выбрано Eat (Utility=0.8). Движение в Home....

Критерий успеха: NPC автоматически идут в Home когда голодны и "едят". Без голода — бездельничают на месте.

Этап 2: Расписание и черты характера

Задачи:
[+] Расписание в Utility AI:
  [+] Добавить в NPCData: WorkStartTime, WorkEndTime (например, 540 = 9:00)
  [+] Действие Work: CanPerform если есть WorkLocationID и сейчас время вблизи WorkStartTime.
  [+] Utility GoToWork, максимум в начале смены, 0 в конце, меняется линейно.
[+] Влияние черт:
  [+] Добавить в NPCData словарь Traits (например, Greedy)
  [+] Действие Steal. Возможно если есть трейт Greedy.  [ ] CanPerform: НЕ дома И есть трейт Greedy > 0.5 И НЕТ трейта Criminal
    [+] GetUtility: Trait.Greedy
    [+] Execute: лог кражи + добавление трейта Criminal
    [+] Создать трейты: Greedy, Criminal (ScriptableObject)
  [+] Для теста: У Жулика Боба нет работы, но есть жадность.
[+] Действие Steal (заглушка):
  [+] CanPerform: только если не дома
  [+] Utility = Trait.Greedy
  [+] Execute: пока просто лог: [Время] Боб: Украл предмет!

Критерий успеха: NPC следуют расписанию. Черта "Greedy" вызывает уникальное поведение (логи воровства).

Этап 3: Отладочные инструменты и UI

[+] Панель выбора персонажа
    [+] Список всех NPC в мире, каждая строка - кнопка с именем
[+] Карточка персонажа
    [+] Открывается при клике на NPC в списке
    [+] Отображает: имя, локация, активность, голод, энергия, черты, инвентарь
    [+] Показывает все возможные действия с их utility-значениями    

Этап 4: Последствия и события

Задачи:
[+] Инвентарь локаций:
  [+] Добавить класс Item
  [+] Добавить в Location: Inventory Items[] (список предметов: "Food", "Vase", "Money")
  [+] Добавить в NpcState Inventory
  [+] Действие Steal теперь удаляет случайный предмет из инвентаря локации и добавляет NPC
[+] Реестр преступлений:
  [+] Создать `CrimeFactory` (фабрика/реестр), доступную из `World`, с полем `crimes: List<Crime>`.
  [+] Создать класс `Crime`:
    - timeMinutes (float)
    - location (Location)
    - stolenItem (Item)             // на текущем прототипе — кража; дальше типы расширим
    - criminal (Npc|null)              // может быть неизвестен; по умолчанию null
    - suspects (List<Npc>)          // снимок присутствующих в локации в момент кражи
    - status (Open|Closed)          // состояние дела
    - resolution (None|Caught|Mistake)
    - notes (string, опционально) 

[+] Интеграция со Steal:
  [+] В `Steal.Execute`:
    - [+] До изъятия предмета собрать текущих `Npc` в этой `location` → сформировать `suspects`.
    - [+] Удалить `stolenItem` из инвентаря локации и добавить в инвентарь NPC.
    - [+] Создать `Crime` с (timeMinutes, location, stolenItem, criminal = текущий NPC, suspects) и добавить в `CrimeFactory.crimes`.
    - [+] Логировать в консоль краткую строку с временем, локацией, предметом.

[+] Наблюдаемость для игрока:
  [+] Переключатель закладок панелей UI
    [+] Можно перейти на цуже существующую панель персонажей.
    [+] Плюс новая панель для дел.
  [ ] Список дел (Crime).
  [ ] Карточка отдельного дела с данными видимыми для персонажа.  

[ ] Простые последствия:
  [ ] Тестовая кнопка "поймать вора": для выбранного `Crime`:
      - status = Closed
      - resolution = Caught
      - к `criminal` добавить трейт `Disgraced`.
  [ ] Тест “ошибка обвинения”: закрыть дело с resolution = Mistake (вор не совпал/обвинённый не был в `suspects`).

Критерий успеха:
  - При срабатывании `Steal` создаётся `Crime` в `CrimeFactory.crimes`, инвентари корректно меняются.
  - Интерфейс выводит список дел и поддерживает `inspect_crime`.
  - Команды последствий меняют статус/результат дела и добавляют `Disgraced` вору (в случае Caught).

Этап 5: Игрок-детектив

Задачи:
[ ] Просмотр дел:
  [ ] Список дел (из CrimeFactory.crimes) в кратком формате:
      [Open] 12:30 Mall — "Vase" — Подозреваемые: Боб, Карл
  [ ] Выбор дела (установка "текущего" дела) через UI (клик/выбор строки).
  [ ] Просмотр "текущего" дела (карточка): время, локация, предмет, подозреваемые (имена), статус, resolution, notes

[ ] Перемещение и осмотр:
  [ ] Перемещение игрока между локациями
  [ ] Просмотр профиля NPC: черты, инвентарь
      Правило видимости: инвентарь NPC доступен только если игрок и NPC в одной локации

[ ] Обвинение:
  [ ] Действие "Обвинить" доступно в карточке "текущего" дела (UI-кнопка)
  [ ] При нажатии игрок выбирает целевого NPC (из списка подозреваемых или из списка NPC в текущей локации)
  [ ] Логика исхода:
      Успех (Caught), если:
        - у выбранного NPC в инвентаре присутствует предмет "текущего" дела (stolenItem)
        → Действия: crime.status = Closed, crime.resolution = Caught, к NPC добавить трейт Disgraced, вывести сообщение об успехе
      Ошибка (Mistake), если любое из условий не выполнено
        → Действия: crime.status = Closed, crime.resolution = Mistake, вывести пояснение (например: “NPC не в списке подозреваемых” или “нет предмета”)

Критерий успеха:
  - Игрок видит появляющиеся дела, выбирает одно как "текущее" и может открыть его карточку
  - Игрок перемещается к нужной локации, осматривает NPC и их инвентари (с учётом видимости)
  - Игрок выполняет "Обвинить" по "текущему" делу; при корректном выборе — Closed/Caught + Disgraced; при ошибке — Closed/Mistake
  - Список дел и карточка корректно отражают статусы