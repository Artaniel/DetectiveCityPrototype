Этап 0: Базовый прототип мира (1-2 дня)

Задачи:
[+] Мир как граф локаций: класс Location (ID, Type, ConnectedLocationsIDs[])
[ ] Создать 5 локаций: Home_NPC1, Work_Shop, Commercial_Mall, Bar, Street (связи: Улица соединяет все здания)
[+] Базовый NPC: класс NPCData (Name, HomeLocationID, WorkLocationID)
[+] Класс NPCState (CurrentLocationID, Hunger, Energy, CurrentActivity)
[ ] 2 тестовых NPC: Обычный Джо (Home=Home_NPC1, Work=Work_Shop), Жулик Боб (Home=Home_NPC1, Work=None)
[+] Система времени: класс WorldState (CurrentTimeInMinutes, Locations[], NPCs[])
[+] Упрощенный "движок времени": цикл, увеличивающий CurrentTimeInMinutes на 1 каждую секунду реального времени
[ ] Изменение состояний NPC со временем: голод растет (0.001 в минуту), энергия тратится (0.001 в минуту)
[ ] Отладка: вывод в консоль статуса каждую минуту: [Время] [NPC Имя] в [Локация]. Голод: 75%

Критерий успеха: NPC "живут" в мире, их состояние меняется со временем (голод растет), можно смотреть, где они находятся.

Этап 1: Utility AI и перемещения (2-3 дня)

Задачи:
[ ] Реализовать действия (NPCAction):
  [ ] Idle: Ничего не делать (Utility = 0.1, если нет других дел)
  [ ] MoveTo(targetID): Рассчитывает путь (пока по графу напрямую), меняет CurrentLocation через N "тиков"
  [ ] Eat: Требует быть в локации с едой (пока хардкод в Home). Снижает голод
[ ] Utility AI (минимальная версия):
  [ ] Для Eat: Utility = NPCState.Hunger / 100f (чем голоднее, тем важнее)
  [ ] Для Idle: Константа 0.1
[ ] Механика выбора действий:
  [ ] В каждом тике для каждого NPC: собрать все возможные действия (CanPerform)
  [ ] Выбрать действие с MAX Utility
  [ ] Выполнить его (Eat или MoveTo + потом Eat)
[ ] Отладка: логировать выбранное действие: [Время] Боб: Выбрано Eat (Utility=0.8). Движение в Home....

Критерий успеха: NPC автоматически идут в Home когда голодны и "едят". Без голода — бездельничают на месте.

Этап 2: Расписание и черты характера (2-3 дня)

Задачи:
[ ] Расписание в Utility AI:
  [ ] Добавить в NPCData: WorkStartTime, WorkEndTime (например, 540 = 9:00)
  [ ] Действие GoToWork: CanPerform если есть WorkLocationID и сейчас время вблизи WorkStartTime
  [ ] Utility = 0.7 * (Энергия/100) * (1 - Голод/200)
  [ ] Действие Work: запускается после прибытия на работу, тратит время и энергию
[ ] Влияние черт:
  [ ] Добавить в NPCData словарь Traits (например, Greedy: 0.8)
  [ ] Для теста: У Жулика Боба нет работы, но если он в Commercial_Mall, то может выбрать Steal
[ ] Действие Steal (заглушка):
  [ ] CanPerform: только если в локации типа Commercial и у NPC Trait.Greedy > 0.5
  [ ] Utility = Trait.Greedy * (1 - Голод/100) (жадность + голод толкают на риск)
  [ ] Execute: пока просто лог: [Время] Боб: Украл предмет!

Критерий успеха: NPC следуют расписанию. Черта "Greedy" вызывает уникальное поведение (логи воровства).

Этап 3: Последствия и события (3-4 дня)

Задачи:
[ ] Инвентарь локаций:
  [ ] Добавить в Location: Inventory Items[] (список ID предметов: "Food", "Vase", "Money")
  [ ] Действие Steal теперь удаляет случайный предмет из инвентаря локации и добавляет NPC
[ ] Генерация "криминальных событий":
  [ ] При краже создавать объект CrimeEvent: LocationID, StolenItemID, SuspectedNPCs[] (все NPC в локации в момент кражи)
  [ ] Хранить активные дела в WorldState.ActiveCrimes
[ ] Наблюдаемость для игрока:
  [ ] Консольный "детективный интерфейс": список активных краж: [Кража] Магазин: Украдена "Ваза". Подозреваемые: Боб, Карл
  [ ] Команда для детализации: inspect_crime 0
[ ] Простые последствия:
  [ ] Если NPC пойман на краже (пока хардкод или тестовая кнопка), добавить ему черту Disgraced (снижает шанс найти работу)

Критерий успеха: Кражи оставляют "физические следы" (пропажа предметов), игрок видит список дел с подозреваемыми.

Этап 4: Игрок-детектив (2-3 дня)

Задачи:
[ ] Команды игрока:
  [ ] travel_to [LocationID] – перемещение между локациями
  [ ] view_npc [NPC Name] – просмотр профиля (черты, инвентарь)
  [ ] accuse [NPC Name] [CrimeID] – обвинить в преступлении (проверка: был ли NPC на месте?)
[ ] Система "знаний" NPC:
  [ ] При обвинении NPC может "расколоться" и выдать сообщника, если у него черта Timid
[ ] Визуализация (примитивная):
  [ ] ASCII-карта локаций с NPC (например, [Mall] > Боб, Игрок)

Критерий успеха: Игрок может расследовать кражу: найти подозреваемых, проверить алиби (где был в WorldState.CurrentTime?), выдвинуть обвинение.